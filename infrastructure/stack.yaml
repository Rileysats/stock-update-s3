AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Stock Update Lambda functions'
Transform: AWS::Serverless-2016-10-31

Parameters:
  StockBucketName:
    Description: "Name of the S3 bucket to store stock data"
    Type: String

Resources:
  StockBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StockBucketName
      VersioningConfiguration:
        Status: Enabled

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt StockBucket.Arn
                  - !Sub '${StockBucket.Arn}/*'

  BuyStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: buy-stock
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ../dist/buy
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref StockBucket
      Timeout: 20
      MemorySize: 200

  SellStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sell-stock
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ../dist/sell
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref StockBucket
      Timeout: 20
      MemorySize: 200
  
  SmsParserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sms-parser
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ../dist/parser
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 20
      MemorySize: 200

  # ApiGatewayRestApi:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Name: SmsCommandAPI

  # SmsResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
  #     PathPart: sms
  #     RestApiId: !Ref ApiGatewayRestApi

  # SmsPostMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGatewayRestApi
  #     ResourceId: !Ref SmsResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: 
  #         Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SmsParserLambda.Arn}/invocations
  #     MethodResponses:
  #       - StatusCode: 200

  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref SmsParserFunction
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/sms

  # Outputs:
  # ApiEndpoint:
  #   Description: "API Gateway endpoint to set as Twilio webhook"
  #   Value: 
  #     Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/sms