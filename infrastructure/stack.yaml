AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Stock Update Lambda functions'
Transform: AWS::Serverless-2016-10-31

Parameters:
  StockBucketName:
    Description: "Name of the S3 bucket to store stock data"
    Type: String

Resources:
  StockBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StockBucketName
      VersioningConfiguration:
        Status: Enabled

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt StockBucket.Arn
                  - !Sub '${StockBucket.Arn}/*'
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:buy-stock
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sell-stock

  BuyStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: buy-stock
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ../dist/buy
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref StockBucket
      Timeout: 20
      MemorySize: 200

  SellStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sell-stock
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ../dist/sell
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref StockBucket
      Timeout: 20
      MemorySize: 200
  
  SmsParserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sms-parser
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ../dist/parser
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 20
      MemorySize: 200
      Events:
        WhatsAppApi:
          Type: Api
          Properties:
            Path: /whatsapp
            Method: post

  StockSignalApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: StockSignalAPI
      ProtocolType: HTTP
      Target: !GetAtt SmsParserFunction.Arn

  StockSignalApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StockSignalApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SmsParserFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'

  StockSignalApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StockSignalApi
      RouteKey: 'POST /trade-signal'
      Target: !Sub integrations/${StockSignalApiIntegration}

  StockSignalApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref StockSignalApi
      StageName: prod
      AutoDeploy: true

  LambdaApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SmsParserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StockSignalApi}/*/*/trade-signal

Outputs:
  ApiInvokeURL:
    Description: Invoke URL for your API
    Value: !Sub https://${StockSignalApi}.execute-api.${AWS::Region}.amazonaws.com/prod/trade-signal